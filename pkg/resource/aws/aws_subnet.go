// GENERATED, DO NOT EDIT THIS FILE
package aws

import (
	"github.com/cloudskiff/driftctl/pkg/resource"
	rescty "github.com/cloudskiff/driftctl/pkg/resource/cty"
	"github.com/zclconf/go-cty/cty"
)

const AwsSubnetResourceType = "aws_subnet"

type AwsSubnet struct {
	Arn                         *string           `cty:"arn" computed:"true"`
	AssignIpv6AddressOnCreation *bool             `cty:"assign_ipv6_address_on_creation"`
	AvailabilityZone            *string           `cty:"availability_zone" computed:"true"`
	AvailabilityZoneId          *string           `cty:"availability_zone_id" computed:"true"`
	CidrBlock                   *string           `cty:"cidr_block"`
	Id                          string            `cty:"id" computed:"true"`
	Ipv6CidrBlock               *string           `cty:"ipv6_cidr_block"`
	Ipv6CidrBlockAssociationId  *string           `cty:"ipv6_cidr_block_association_id" computed:"true"`
	MapPublicIpOnLaunch         *bool             `cty:"map_public_ip_on_launch"`
	OutpostArn                  *string           `cty:"outpost_arn"`
	OwnerId                     *string           `cty:"owner_id" computed:"true"`
	Tags                        map[string]string `cty:"tags"`
	VpcId                       *string           `cty:"vpc_id"`
	Timeouts                    *struct {
		Create *string `cty:"create"`
		Delete *string `cty:"delete"`
	} `cty:"timeouts" diff:"-"`
	CtyVal *cty.Value `diff:"-"`
}

func (r *AwsSubnet) TerraformId() string {
	return r.Id
}

func (r *AwsSubnet) TerraformType() string {
	return AwsSubnetResourceType
}

func (r *AwsSubnet) CtyValue() *cty.Value {
	return r.CtyVal
}

func initAwsSubnetMetaData(resourceSchemaRepository *resource.SchemaRepository) {
	resourceSchemaRepository.SetNormalizeFunc(AwsSubnetResourceType, func(val *rescty.CtyAttributes) {
		val.SafeDelete([]string{"timeouts"})
	})
}
